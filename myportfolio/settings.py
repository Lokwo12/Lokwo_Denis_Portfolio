"""
Django settings for myportfolio project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.core.management.utils import get_random_secret_key
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env (optional)
try:
    from dotenv import load_dotenv
    load_dotenv(BASE_DIR / '.env')
except Exception:
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from env for deployments; fall back to the existing dev key for local dev
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-64idji^07q4l_qfqlyal#c%ct9i^3!8l^_x%klp+=u(q)bjxg$')

# SECURITY WARNING: don't run with debug turned on in production!
# Read from env for deploys; defaults to True for local dev
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Allow common local hosts by default; extend via ALLOWED_HOSTS env var for deploys
_env_hosts = [h for h in os.environ.get('ALLOWED_HOSTS', '').split(',') if h]
ALLOWED_HOSTS = _env_hosts or ['127.0.0.1', 'localhost', 'testserver']


# Application definition

# Optionally enable Jazzmin if available in this environment
try:
    import jazzmin  # type: ignore
    _HAS_JAZZMIN = True
except Exception:
    _HAS_JAZZMIN = False

INSTALLED_APPS = [
    *(['jazzmin'] if _HAS_JAZZMIN else []),
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'portfolio',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise (static files) is enabled in production only
    *(['whitenoise.middleware.WhiteNoiseMiddleware'] if not DEBUG else []),
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'myportfolio.middleware.ratelimit.SimpleRateLimitMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myportfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'portfolio.context_processors.analytics',
                'portfolio.context_processors.profile',
                'portfolio.context_processors.site_settings',
            ],
            # Ensure custom template tag libraries are always discoverable
            'libraries': {
                'site_extras': 'portfolio.templatetags.site_extras',
            },
        },
    },
]

WSGI_APPLICATION = 'myportfolio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Allow configuring the database from DATABASE_URL (Render Postgres). If not provided,
# the project will continue to use the local SQLite database.
if os.environ.get('DATABASE_URL'):
    try:
        import dj_database_url
        DATABASES['default'] = dj_database_url.parse(os.environ['DATABASE_URL'], conn_max_age=600)
    except Exception:
        # If dj_database_url is missing or parsing fails, keep the default sqlite config
        pass


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Development email backend: prints emails to the console by default
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'no-reply@example.com')
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', os.environ.get('DEFAULT_FROM_EMAIL', 'you@example.com'))

# Optional SMTP configuration using env vars (for production)
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587)) if os.environ.get('EMAIL_PORT') else None
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'

# Auto-switch to SMTP if EMAIL_HOST is provided and EMAIL_BACKEND not explicitly set
if not os.environ.get('EMAIL_BACKEND') and EMAIL_HOST:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Use EMAIL_HOST_USER as DEFAULT_FROM_EMAIL if a placeholder value is still set
if DEFAULT_FROM_EMAIL == 'no-reply@example.com' and EMAIL_HOST_USER:
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Simple cache for rate-limiting middleware; local-memory by default
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# reCAPTCHA settings (optional)
RECAPTCHA_SECRET = os.environ.get('RECAPTCHA_SECRET')
RECAPTCHA_SITE_KEY = os.environ.get('RECAPTCHA_SITE_KEY')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Analytics (Google Analytics 4)
GA_MEASUREMENT_ID = os.environ.get('GA_MEASUREMENT_ID')
CALENDLY_URL = os.environ.get('CALENDLY_URL', '')

# Portfolio profile/config
CAREER_START_YEAR = int(os.environ.get('CAREER_START_YEAR', 2020))

# Customizable profile data used on About page and elsewhere
PROFILE = {
    'name': 'Denis Lokwo',
    'title': 'Full‑stack Developer — Django, React, TypeScript',
    'summary': "I'm a full‑stack developer passionate about building fast, accessible, and elegant web applications. I enjoy solving hard problems, mentoring, and delivering production‑ready systems.",
    'location': 'L’Aquila, Abruzzi, Italy',
    'email': 'denis.lokwo@example.com',
    'phone': '+39 123 456 7890',
    'whatsapp': '+39 123 456 7890',
    'skills': ['Python','Django','DRF','PostgreSQL','JavaScript','TypeScript','React','Tailwind','Docker','CI/CD'],
    'tools': ['Git','Pytest','Poetry','Celery','Redis'],
    'languages': ['English','Italian'],
    'interests': ['Open Source','AI','Developer Experience'],
    'links': {
        'linkedin': 'https://linkedin.com/in/denislokwo',
        'github': 'https://github.com/Lokwo12',
    },
    'experience': [
        {'role':'Senior Full‑stack Developer','company':'Company Name','period':'2023 — Present','summary':'Leading delivery of scalable web apps, improving performance and developer productivity, mentoring juniors, and collaborating cross‑functionally.'},
        {'role':'Software Engineer','company':'Company Name','period':'2021 — 2023','summary':'Built APIs, dashboards, and automation for data‑heavy workflows. Focused on testing, typing, and reliable deploys.'},
    ],
    'education': [
        {
            'degree':'BSc, Computer Science',
            'institution':'University of Example',
            'period':'2017 — 2021',
            'location':'L’Aquila, Italy',
            'gpa':'3.7/4.0',
            'honors':'Magna Cum Laude',
            'summary':'Strong foundation in algorithms, data structures, databases, and HCI.',
            'courses':['Algorithms','Operating Systems','Computer Networks','Databases','Human‑Computer Interaction']
        },
        {
            'degree':'MSc, Software Engineering',
            'institution':'Polytechnic Institute',
            'period':'2021 — 2023',
            'location':'Rome, Italy',
            'gpa':None,
            'honors':None,
            'summary':'Focused on distributed systems, cloud architectures, and software quality.',
            'courses':['Distributed Systems','Cloud Computing','Software Testing','Advanced Databases']
        },
    ],
    'certifications': [],
    'awards': [],
}

# Jazzmin admin theme configuration (minimal) — only applied when installed
if _HAS_JAZZMIN:
    JAZZMIN_SETTINGS = {
        "site_title": "Portfolio Admin",
        "site_header": "Portfolio Admin",
        "welcome_sign": "Welcome to Portfolio Admin",
        # Use favicon if available
        "site_logo": None,
    }

    JAZZMIN_UI_TWEAKS = {
        # Keep defaults; can be customized later
    }

# Production static files storage (hashing + compression)
if not DEBUG:
    STORAGES = {
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
        # Default file storage unchanged (local)
    }

    # Basic security best-practices toggled on in production
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', 0))
    SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'
    SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False') == 'True'
    CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False') == 'True'
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_REFERRER_POLICY = os.environ.get('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')
    # Allow reverse proxy/hosts configuration via env
    CSRF_TRUSTED_ORIGINS = [o for o in os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',') if o]
